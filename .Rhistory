install.packages(c("doSNOW", "microbenchmark"))
# read dataset into R
economics <- read.csv("../data/economics.csv")
# have a look at the data
#head(economics, 2)
# create a 'large' dataset out of this
for (i in 1:3) {
economics <- rbind(economics, economics)
}
#dim(economics)
include_graphics("../img/03_script-hardware.jpg")
# load packages
library(ggplot2)
# prepare data to plot
plotdata <- data.frame(beta1 = mc_results,
time_elapsed = mc_times,
subs_size = n_subs_sizes)
# simple version of the Uluru algorithm
beta_uluru <-
function(X_subs, y_subs, X_rem, y_rem) {
# compute beta_fs (this is simply OLS applied to the subsample)
XXi_subs <- solve(crossprod(X_subs, X_subs))
Xy_subs <- crossprod(X_subs, y_subs)
b_fs <- XXi_subs  %*% Xy_subs
# compute \mathbf{R}_{rem}
R_rem <- y_rem - X_rem %*% b_fs
# compute \hat{\beta}_{correct}
b_correct <- (nrow(X_subs)/(nrow(X_rem))) * XXi_subs %*% crossprod(X_rem, R_rem)
# beta uluru
return(b_fs + b_correct)
}
# set size of subsample
n_subs <- 1000
# select subsample and remainder
n_obs <- nrow(X)
# set size of subsample
n_subs <- 1000
# select subsample and remainder
n_obs <- nrow(X)
# define subsamples
n_subs_sizes <- seq(from = 1000, to = 500000, by=10000)
n_runs <- length(n_subs_sizes)
# compute uluru result, stop time
mc_results <- rep(NA, n_runs)
mc_times <- rep(NA, n_runs) # Shows how much time has elapsed
for (i in 1:n_runs) {
# set size of subsample
n_subs <- n_subs_sizes[i]
# select subsample and remainder
n_obs <- nrow(X)
X_subs <- X[1L:n_subs,]
y_subs <- y[1L:n_subs]
X_rem <- X[(n_subs+1L):n_obs,]
y_rem <- y[(n_subs+1L):n_obs]
mc_results[i] <- beta_uluru(X_subs, y_subs, X_rem, y_rem)[2] # the first element is the intercept --> save the estimate
mc_times[i] <- system.time(beta_uluru(X_subs, y_subs, X_rem, y_rem))[3]  # --> save the time
}
# set parameter values
n <- 10000000 # number observations
p <- 4 # number of variables
# Generate sample based on Monte Carlo
# generate a design matrix (~ our 'dataset') with four variables and 10000 observations
X <- matrix(rnorm(n*p, mean = 10), ncol = p) # n*p will give the dimensions of the matrix giving it random numbers
# add column for intercept
X <- cbind(rep(1, n), X)  # We need to manually add the column for the intercept as we dont use a automatic function to do that
# MC model
y <- 2 + 1.5*X[,2] + 4*X[,3] - 3.5*X[,4] + 0.5*X[,5] + rnorm(n) # given X we can calculate y by selecting the respective columns. We here just randomly selected the coefficients.
# apply the ols estimator
beta_ols(X, y)
# simple version of the Uluru algorithm
beta_uluru <-
function(X_subs, y_subs, X_rem, y_rem) {
# compute beta_fs (this is simply OLS applied to the subsample)
XXi_subs <- solve(crossprod(X_subs, X_subs))
Xy_subs <- crossprod(X_subs, y_subs)
b_fs <- XXi_subs  %*% Xy_subs
# compute \mathbf{R}_{rem}
R_rem <- y_rem - X_rem %*% b_fs
# compute \hat{\beta}_{correct}
b_correct <- (nrow(X_subs)/(nrow(X_rem))) * XXi_subs %*% crossprod(X_rem, R_rem)
# beta uluru
return(b_fs + b_correct)
}
# set size of subsample
n_subs <- 1000
# select subsample and remainder
n_obs <- nrow(X)
X_subs <- X[1L:n_subs,]   # Use "1L" to treat 1 as data type integer to increase speed (good practice)
y_subs <- y[1L:n_subs]
X_rem <- X[(n_subs+1L):n_obs,]
y_rem <- y[(n_subs+1L):n_obs]
# apply the uluru estimator
beta_uluru(X_subs, y_subs, X_rem, y_rem)
# define subsamples
n_subs_sizes <- seq(from = 1000, to = 500000, by=10000)
n_runs <- length(n_subs_sizes)
# compute uluru result, stop time
mc_results <- rep(NA, n_runs)
mc_times <- rep(NA, n_runs) # Shows how much time has elapsed
for (i in 1:n_runs) {
# set size of subsample
n_subs <- n_subs_sizes[i]
# select subsample and remainder
n_obs <- nrow(X)
X_subs <- X[1L:n_subs,]
y_subs <- y[1L:n_subs]
X_rem <- X[(n_subs+1L):n_obs,]
y_rem <- y[(n_subs+1L):n_obs]
mc_results[i] <- beta_uluru(X_subs, y_subs, X_rem, y_rem)[2] # the first element is the intercept --> save the estimate
mc_times[i] <- system.time(beta_uluru(X_subs, y_subs, X_rem, y_rem))[3]  # --> save the time
}
install.packages(c("biganalytics", "bigmemory", "ff", "ffbase"))
